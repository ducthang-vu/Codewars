#BASIC CODE:

def list_squared(m, n):
    solution = []
    for a in range(m, n + 1):
        divisors = []
        for b in range(1, n+1):
            result = a/b
            if result.is_integer():
                divisors.append(b)
            else:
                continue
        squares = [n**2 for n in divisors]
        total = sum(squares)
        if (total**0.5).is_integer():
            solution.append([a, total])
        else:
            continue
    return solution



 #SHORT:

 def list_squared(m, n):
    solution = []
    for a in range(m, n + 1):
        divisors = []
        for b in range(1, n+1):
            if (a/b).is_integer():
                divisors.append(b)
            else:
                continue
        if ((sum(n**2 for n in divisors))**0.5).is_integer():
            solution.append([a, sum(n**2 for n in divisors)])
        else:
            continue
    return solution


# SHORT BUT UGLY

def list_squared(m, n):
    return [[a, sum(n ** 2 for n in [b for b in range(1, n + 1) if (a / b).is_integer()])]
            for a in range(m, n + 1)
            if ((sum(n ** 2 for n in [b for b in range(1, n + 1)
                                      if (a / b).is_integer()])) ** 0.5).is_integer()]


# ELEGANT BUT INEFFICIENT:

def sum_of_squared_divs(a):
    # given integer a, finds divisors and return sum of the all of them squared
    return sum([(a / b)**2 for b in range(1, a + 1) if (a / b).is_integer()])


def list_squared(m, n):
    return [[a, sum_of_squared_divs(a)] for a in range(m, n + 1) if (sum_of_squared_divs(a) ** 0.5).is_integer()]


# MORE EFFICIENT VERSION:

def list_squared(m, n):
    solution = []
    for a in range(m, n + 1):
        total = sum([b**2 for b in find_divs(a)])
        if (total**0.5).is_integer():
            solution.append([a, total])
    return solution